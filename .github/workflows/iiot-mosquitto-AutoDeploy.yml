name: iiot-mosquitto-AutoDeploy
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'infra/iiot-mosquitto.yaml'
      - 'mosquitto/**'
      - '.github/workflows/iiot-mosquitto-AutoDeploy.yml'

permissions:
  id-token: write
  contents: read

env:
  RG: "iiot-poc-rg"
  ACA_ENV: "iiot-env-public"
  APP_NAME: "mosquitto"
  IMAGE: "eclipse-mosquitto:2.0"
  YAML_PATH: "infra/iiot-mosquitto.yaml"
  CONF_PATH: "mosquitto/mosquitto.conf"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Preflight OIDC config
        shell: bash
        run: |
          echo "Checking for legacy auth configurations..."
          if grep -RniE 'auth-type|creds:' .github/workflows 2>/dev/null | grep -v "# auth-type"; then
            echo "ERROR: Found legacy auth config in workflows"
            exit 1
          fi
          echo "✓ No legacy auth found"
          
          echo "Verifying Azure secrets..."
          [[ -n "${{ secrets.AZURE_CLIENT_ID }}" ]] || { echo "✗ Missing AZURE_CLIENT_ID"; exit 1; }
          [[ -n "${{ secrets.AZURE_TENANT_ID }}" ]] || { echo "✗ Missing AZURE_TENANT_ID"; exit 1; }
          [[ -n "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]] || { echo "✗ Missing AZURE_SUBSCRIPTION_ID"; exit 1; }
          echo "✓ All Azure secrets present"

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure context
        run: |
          echo "Logged in to Azure:"
          az account show -o table

      - name: Ensure containerapp extension
        run: az extension add --name containerapp --upgrade --only-show-errors

      - name: Check if Container App exists
        id: check_app
        shell: bash
        run: |
          if az containerapp show -g "$RG" -n "$APP_NAME" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✓ Container App '$APP_NAME' exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "ℹ Container App '$APP_NAME' does not exist yet"
          fi

      - name: Validate mosquitto.conf exists
        shell: bash
        run: |
          if [[ ! -f "$CONF_PATH" ]]; then
            echo "✗ Error: Configuration file not found at $CONF_PATH"
            exit 1
          fi
          echo "✓ Found $CONF_PATH ($(wc -l < "$CONF_PATH") lines)"

      - name: Upload mosquitto.conf as secret
        if: steps.check_app.outputs.exists == 'true'
        shell: bash
        run: |
          echo "Uploading mosquitto.conf as secret..."
          CONF_CONTENT=$(cat "$CONF_PATH" | base64 -w0)
          az containerapp secret set \
            --name "$APP_NAME" \
            --resource-group "$RG" \
            --secrets "mosqconf=$CONF_CONTENT" \
            --output none
          echo "✓ Secret 'mosqconf' updated"

      - name: Render YAML template
        shell: bash
        run: |
          mkdir -p .render
          echo "Rendering YAML from $YAML_PATH..."
          
          if grep -q "__IMAGE__" "$YAML_PATH"; then
            echo "Replacing __IMAGE__ placeholder with $IMAGE"
            sed "s|__IMAGE__|$IMAGE|g" "$YAML_PATH" > .render/mosquitto.containerapp.yaml
          else
            echo "No placeholders found, using YAML as-is"
            cp "$YAML_PATH" .render/mosquitto.containerapp.yaml
          fi
          
          echo "✓ Rendered YAML:"
          head -n 5 .render/mosquitto.containerapp.yaml

      - name: Deploy Container App
        shell: bash
        run: |
          if [[ "${{ steps.check_app.outputs.exists }}" == "true" ]]; then
            echo "Updating existing Container App..."
            az containerapp update \
              --name "$APP_NAME" \
              --resource-group "$RG" \
              --yaml .render/mosquitto.containerapp.yaml \
              --output none
            echo "✓ Container App updated successfully"
          else
            echo "Creating new Container App..."
            az containerapp create \
              --name "$APP_NAME" \
              --resource-group "$RG" \
              --environment "$ACA_ENV" \
              --yaml .render/mosquitto.containerapp.yaml \
              --output none
            echo "✓ Container App created successfully"
          fi

      - name: Upload mosquitto.conf secret (post-deploy)
        if: steps.check_app.outputs.exists == 'false'
        shell: bash
        run: |
          echo "Setting initial secret for newly created app..."
          CONF_CONTENT=$(cat "$CONF_PATH" | base64 -w0)
          az containerapp secret set \
            --name "$APP_NAME" \
            --resource-group "$RG" \
            --secrets "mosqconf=$CONF_CONTENT" \
            --output none
          echo "✓ Secret 'mosqconf' set"

      - name: Show deployment info
        run: |
          echo "Deployment Summary:"
          az containerapp show \
            --name "$APP_NAME" \
            --resource-group "$RG" \
            --query "{Name:name, Status:properties.provisioningState, Location:location, FQDN:properties.configuration.ingress.fqdn, Image:properties.template.containers[0].image}" \
            --output table
          
          echo ""
          echo "Application URL (if ingress is external):"
          az containerapp show \
            --name "$APP_NAME" \
            --resource-group "$RG" \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv || echo "No external ingress configured"
