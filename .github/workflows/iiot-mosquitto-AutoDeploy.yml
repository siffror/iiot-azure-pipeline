name: iiot-mosquitto-AutoDeploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'infra/iiot-mosquitto.yaml'
      - '.github/workflows/iiot-mosquitto-AutoDeploy.yml'
      - 'mosquitto/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  RG: iiot-poc-rg
  ACA_ENV: iiot-env-public
  APP_NAME: mosquitto
  YAML_PATH: infra/iiot-mosquitto.yaml
  CONF_PATH: mosquitto/mosquitto.conf

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.IIOTFFTSERVICE_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.IIOTFFTSERVICE_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.IIOTFFTSERVICE_AZURE_SUBSCRIPTION_ID }}

      - name: Ensure latest containerapp extension
        run: |
          set -euo pipefail
          az extension update -n containerapp || az extension add -n containerapp || (az extension remove -n containerapp && az extension add -n containerapp)

      - name: Sanity check
        run: |
          az account show -o table
          az containerapp env show -g "$RG" -n "$ACA_ENV" --query location -o tsv

      - name: Upload mosquitto.conf as secret (mosquitto-conf)
        run: |
          set -euo pipefail
          test -f "$CONF_PATH" || { echo "Missing $CONF_PATH" >&2; exit 1; }
          az containerapp secret set -g "$RG" -n "$APP_NAME" --secrets "mosquitto-conf=$(<"$CONF_PATH")"
          az containerapp secret list -g "$RG" -n "$APP_NAME" -o table

      - name: Deploy Container App from YAML (create or update)
        run: |
          set -euo pipefail
          if az containerapp show -g "$RG" -n "$APP_NAME" >/dev/null 2>&1; then
            echo "Updating existing Container App from YAML..."
            az containerapp update -g "$RG" -n "$APP_NAME" --yaml "$YAML_PATH"
          else
            echo "Creating new Container App from YAML..."
            az containerapp create -g "$RG" -n "$APP_NAME" --yaml "$YAML_PATH" --environment "$ACA_ENV"
          fi

      - name: Final status and recent logs
        run: |
          az containerapp show -g "$RG" -n "$APP_NAME" --query "{state:properties.provisioningState,latestRev:properties.latestRevisionName}" -o table
          az containerapp logs show -g "$RG" -n "$APP_NAME" --tail 100 || true

      - name: Cleanup old inactive revisions
        run: |
          az containerapp revision list -g "$RG" -n "$APP_NAME" --query "[?properties.active==\`false\`].name" -o tsv | xargs -r -I {} az containerapp revision delete -g "$RG" -n "$APP_NAME" --revision {} --yes
