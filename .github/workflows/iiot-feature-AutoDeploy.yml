name: iiot-mosquitto-AutoDeploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]   # måste matcha din federated credential subject exakt

permissions:
  id-token: write        # krävs för OIDC
  contents: read

env:
  RG: "iiot-poc-rg"
  ACA_ENV: "iiot-env-public"
  APP_NAME: "mosquitto"
  IMAGE: "eclipse-mosquitto:2.0.18"
  YAML_PATH: "infra/iiot-mosquitto.yaml"
  CONF_PATH: "mosquitto/mosquitto.conf"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # -------------------------------------------------------------
      # Azure-inloggning via OIDC (inga creds, ingen auth-type)
      # -------------------------------------------------------------
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          environment: azurecloud

      - name: Verify Azure context
        run: az account show -o table

      # -------------------------------------------------------------
      # Säkerställ att containerapp-extensionen finns
      # -------------------------------------------------------------
      - name: Ensure containerapp extension
        run: |
          set -euo pipefail
          if ! az extension show --name containerapp >/dev/null 2>&1; then
            az extension add --name containerapp
          else
            az extension update --name containerapp || true
          fi

      # -------------------------------------------------------------
      # Ladda upp mosquitto.conf som hemlighet i ACA
      # -------------------------------------------------------------
      - name: Upload mosquitto.conf as secret
        run: |
          set -euo pipefail
          test -f "$CONF_PATH" || { echo "❌ Missing $CONF_PATH" >&2; exit 1; }
          echo "Uploading mosquitto.conf as secret 'mosqconf'..."
          az containerapp secret set \
            --name "$APP_NAME" \
            --resource-group "$RG" \
            --secrets "mosqconf=$(<"$CONF_PATH")"

      # -------------------------------------------------------------
      # Rendera manifest (ersätt __IMAGE__ om det finns)
      # -------------------------------------------------------------
      - name: Render manifest (replace __IMAGE__ if present)
        run: |
          set -euo pipefail
          mkdir -p .render
          if grep -q "__IMAGE__" "$YAML_PATH"; then
            sed "s|__IMAGE__|$IMAGE|g" "$YAML_PATH" > .render/mosquitto.containerapp.yaml
          else
            cp "$YAML_PATH" .render/mosquitto.containerapp.yaml
          fi
          echo "Using manifest: .render/mosquitto.containerapp.yaml"

      # -------------------------------------------------------------
      # Deploy eller uppdatera Container App
      # -------------------------------------------------------------
      - name: Deploy Container App from YAML (create or update)
        run: |
          set -euo pipefail
          if az containerapp show -g "$RG" -n "$APP_NAME" >/dev/null 2>&1; then
            echo "Updating existing Container App from YAML..."
            az containerapp update -g "$RG" -n "$APP_NAME" \
              --yaml .render/mosquitto.containerapp.yaml
          else
            echo "Creating new Container App from YAML..."
            az containerapp create -g "$RG" -n "$APP_NAME" \
              --yaml .render/mosquitto.containerapp.yaml \
              --environment "$ACA_ENV"
          fi

      # -------------------------------------------------------------
      # Slutstatus och loggutdrag
      # -------------------------------------------------------------
      - name: Final status and recent logs
        run: |
          set -euo pipefail
          az containerapp show -g "$RG" -n "$APP_NAME" \
            --query "{state:properties.provisioningState,latestRev:properties.latestRevisionName}" -o table
          az containerapp logs show -g "$RG" -n "$APP_NAME" --tail 80 || true
