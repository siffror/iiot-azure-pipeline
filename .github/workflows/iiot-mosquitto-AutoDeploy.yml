name: iiot-mosquitto-AutoDeploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]   # måste matcha din federated credential subject exakt

permissions:
  id-token: write        # krävs för OIDC
  contents: read

env:
  RG: "iiot-poc-rg"
  ACA_ENV: "iiot-env-public"
  APP_NAME: "mosquitto"
  IMAGE: "eclipse-mosquitto:2.0.18"
  YAML_PATH: "infra/iiot-mosquitto.yaml"
  CONF_PATH: "mosquitto/mosquitto.conf"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Guard block legacy SP auth
        shell: bash
        run: |
          set -euo pipefail
          echo "Scanning .github/workflows for legacy auth (auth-type/creds/AZURE_CREDENTIALS)..."
          if grep -RniE '(^|[:space])auth-type|(^|[:space])creds:|AZURE_CREDENTIALS' .github/workflows >/dev/null 2>&1; then
            echo "Found legacy auth config. Remove it before proceeding to ensure OIDC is used." >&2
            exit 1
          fi
          echo "OK: No legacy auth found"

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          # För OIDC: låt auth-type/creds vara utelämnat — action auto-detekterar OIDC via id-token permission.
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false

      - name: Verify Azure context
        shell: bash
        run: |
          set -euo pipefail
          az account show -o table

      - name: Ensure containerapp extension
        shell: bash
        run: |
          set -euo pipefail
          if ! az extension show --name containerapp >/dev/null 2>&1; then
            az extension add --name containerapp
          else
            az extension update --name containerapp || true
          fi

      - name: Upload mosquitto.conf as secret
        shell: bash
        run: |
          set -euo pipefail
          test -f "$CONF_PATH" || { echo "Missing $CONF_PATH" >&2; exit 1; }
          mosq_conf=$(printf '%s\n' "$(cat "$CONF_PATH")")
          az containerapp secret set \
            --name "$APP_NAME" \
            --resource-group "$RG" \
            --secrets mosquitto.conf="$mosq_conf"

      - name: Render YAML (replace __IMAGE__ placeholder if present)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .render
          if grep -q "__IMAGE__" "$YAML_PATH"; then
            sed "s|__IMAGE__|$IMAGE|g" "$YAML_PATH" > .render/mosquitto.containerapp.yaml
          else
            cp "$YAML_PATH" .render/mosquitto.containerapp.yaml
          fi
          echo "Using manifest: .render/mosquitto.containerapp.yaml"

      - name: Deploy Container App from YAML
        shell: bash
        run: |
          set -euo pipefail
          if az containerapp show -g "$RG" -n "$APP_NAME" >/dev/null 2>&1; then
            echo "Container App exists — attempting update from YAML"
            az containerapp update -g "$RG" -n "$APP_NAME" --yaml .render/mosquitto.containerapp.yaml || {
              echo "Update via --yaml failed; try inspecting YAML or recreate." >&2
            }
          else
            echo "Container App not found — creating from YAML"
            az containerapp create -g "$RG" -n "$APP_NAME" --yaml .render/mosquitto.containerapp.yaml --environment "$ACA_ENV"
          fi

      - name: Final status and recent logs
        shell: bash
        run: |
          set -euo pipefail
          az containerapp show -g "$RG" -n "$APP_NAME" --query "{state:properties.provisioningState,latestRev:properties.latestRevisionName}" -o table
          az containerapp logs show -g "$RG" -n "$APP_NAME" --tail 80 || true
