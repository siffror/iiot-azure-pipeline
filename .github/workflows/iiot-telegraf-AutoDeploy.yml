name: Auto deploy iiot-telegraf

on:
  push:
    branches: [ main ]
    paths:
      - 'telegraf/**'
      - 'infra/iiot-telegraf.yaml'
      - '.github/workflows/iiot-telegraf-AutoDeploy.yml'
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      RG: iiot-poc-rg
      APP: iiot-telegraf
      ENV_NAME: iiot-env-public
      ACR_NAME: iiotpocacr

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.IIOTFFTSERVICE_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.IIOTFFTSERVICE_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.IIOTFFTSERVICE_AZURE_SUBSCRIPTION_ID }}

      - name: Ensure app exists (first run)
        shell: bash
        run: |
          az containerapp show -g "$RG" -n "$APP" >/dev/null 2>&1 || \
          az containerapp create -g "$RG" -n "$APP" \
            --environment "$ENV_NAME" \
            --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest \
            --ingress internal

      # üîÑ V√§nta tills provisioning √§r klar (hindrar 'operation in progress')
      - name: Wait until app is ready
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..60}; do
            STATE=$(az containerapp show -g "$RG" -n "$APP" --query "properties.provisioningState" -o tsv || echo "Unknown")
            if [ "$STATE" = "Succeeded" ] || [ "$STATE" = "Running" ]; then
              echo "App ready (state=$STATE)"; break
            fi
            echo "Waiting for app provisioning to finish (state=$STATE)..."
            sleep 5
            if [ $i -eq 60 ]; then echo "Timeout waiting for app"; exit 1; fi
          done
        # Allm√§n fels√∂kning: v√§nta tills appen √§r klar innan uppdateringar g√∂rs. :contentReference[oaicite:2]{index=2}

      # ‚öôÔ∏è Bind ACR med system-MI (RBAC √§r redan satt manuellt)
      - name: Configure ACR registry with system identity
        shell: bash
        run: |
          ACR_SERVER="${ACR_NAME}.azurecr.io"
          az containerapp identity assign -g "$RG" -n "$APP" --system-assigned      # aktivera MI :contentReference[oaicite:3]{index=3}
          az containerapp registry set -g "$RG" -n "$APP" --server "$ACR_SERVER" --identity system  # bind registry :contentReference[oaicite:4]{index=4}

      # üîê S√§kerst√§ll att KV-referensen finns i appen innan YAML valideras
      - name: Ensure KV secret exists (iiot-telegraf)
        if: ${{ vars.SECRET_SOURCE == 'kv' }}
        shell: bash
        env:
          KV_INFLUX_TOKEN_URL: https://iiotpockv.vault.azure.net/secrets/influxdb-admin-token/699ecb022ea243aeafb8285061cbb1e0
        run: |
          az containerapp secret set \
            -g "$RG" -n "$APP" \
            --secrets influxdb-admin-token=keyvaultref:${KV_INFLUX_TOKEN_URL},identityref:system
        # Syntax: key=keyvaultref:<url>,identityref:<identity> :contentReference[oaicite:5]{index=5}

      # ‚õîÔ∏è Skippa GitHub-secret-v√§gen om vi k√∂r KV
      - name: Validate required secret
        if: ${{ vars.SECRET_SOURCE != 'kv' }}
        shell: bash
        run: |
          TOK='${{ secrets.INFLUXDB_ADMIN_TOKEN }}'
          if [ -z "$TOK" ]; then
            echo "Missing secret: INFLUXDB_ADMIN_TOKEN"; exit 1
          fi
          echo "INFLUXDB_ADMIN_TOKEN length: ${#TOK}"

      - name: Set app secrets
        if: ${{ vars.SECRET_SOURCE != 'kv' }}
        shell: bash
        run: |
          CLEAN_TOKEN="$(printf '%s' '${{ secrets.INFLUXDB_ADMIN_TOKEN }}' | tr -d '\r\n')"
          az containerapp secret set -g "$RG" -n "$APP" \
            --secrets influxdb-admin-token="$CLEAN_TOKEN"

      - name: Render YAML tag
        shell: bash
        run: |
          cp infra/iiot-telegraf.yaml infra/iiot-telegraf.rendered.yaml
          sed -i "s|__TAG__|${{ github.sha }}|g" infra/iiot-telegraf.rendered.yaml
          cat infra/iiot-telegraf.rendered.yaml

      - name: Build & Deploy Telegraf (ACA)
        uses: azure/container-apps-deploy-action@v2
        with:
          appSourcePath: ${{ github.workspace }}/telegraf
          dockerfilePath: Dockerfile
          acrName: ${{ env.ACR_NAME }}
          containerAppName: ${{ env.APP }}
          resourceGroup: ${{ env.RG }}
          containerAppEnvironment: ${{ env.ENV_NAME }}
          imageToBuild: ${{ env.ACR_NAME }}.azurecr.io/iiot-telegraf:${{ github.sha }}
          yamlConfigPath: infra/iiot-telegraf.rendered.yaml

      - name: Map INFLUX_TOKEN to existing KV-backed secret
        shell: bash
        run: |
          az containerapp update -g "$RG" -n "$APP" \
            --set-env-vars INFLUX_TOKEN=secretref:influxdb-admin-token
        # CLI env->secret ska anv√§nda 'secretref:' :contentReference[oaicite:6]{index=6}

      - name: Cleanup old inactive revisions
        shell: bash
        run: |
          az containerapp revision list -g "$RG" -n "$APP" \
            --query "[?properties.active==\`false\`].name" -o tsv | \
          xargs -r -I {} az containerapp revision delete -g "$RG" -n "$APP" --revision {} --yes
