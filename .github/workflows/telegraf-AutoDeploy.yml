name: Auto deploy telegraf

on:
  push:
    branches: [ main ]
    paths:
      - 'telegraf/**'
      - 'infra/telegraf.yaml'
      - '.github/workflows/telegraf-AutoDeploy.yml'
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      RG: iiot-poc-rg
      APP: telegraf
      ENV_NAME: iiot-env-public
      ACR_NAME: iiotpocacr

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.IIOTFFTSERVICE_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.IIOTFFTSERVICE_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.IIOTFFTSERVICE_AZURE_SUBSCRIPTION_ID }}

      - name: Install ACA extension
        run: az extension add --name containerapp --upgrade

      # Skapa appen första gången (så system-MI finns). Ingress kan vara intern/dummy.
      - name: Ensure app exists (first run)
        shell: bash
        run: |
          az containerapp show -g "$RG" -n "$APP" >/dev/null 2>&1 || \
          az containerapp create -g "$RG" -n "$APP" \
            --environment "$ENV_NAME" \
            --image mcr.microsoft.com/azuredocs/containerapps-helloworld:latest \
            --ingress internal --target-port 8080

      # Vänta på system-assigned identity
      - name: Wait for system identity
        shell: bash
        run: |
          set -euo pipefail
          for i in {1..30}; do
            PID=$(az containerapp show -g "$RG" -n "$APP" --query "identity.principalId" -o tsv || true)
            [ -n "${PID:-}" ] && [ "$PID" != "None" ] && { echo "System MI: $PID"; exit 0; }
            echo "Waiting for system MI... ($i/30)"; sleep 5
          done
          echo "Timeout waiting for system MI"; exit 1

      # ACR pull tillåtelser
      - name: Grant AcrPull to environment & app identities
        shell: bash
        run: |
          set -euo pipefail
          ACR_ID=$(az acr show -n "$ACR_NAME" --query id -o tsv)
          ENV_MI=$(az containerapp env show -g "$RG" -n "$ENV_NAME" --query "identity.principalId" -o tsv || true)
          APP_MI=$(az containerapp show -g "$RG" -n "$APP" --query "identity.principalId" -o tsv || true)
          [ -n "$ENV_MI" ] && [ "$ENV_MI" != "None" ] && az role assignment create --assignee "$ENV_MI" --role "AcrPull" --scope "$ACR_ID" >/dev/null 2>&1 || true
          [ -n "$APP_MI" ] && [ "$APP_MI" != "None" ] && az role assignment create --assignee "$APP_MI" --role "AcrPull" --scope "$ACR_ID" >/dev/null 2>&1 || true
          az containerapp identity assign -g "$RG" -n "$APP" --system-assigned >/dev/null
          az containerapp registry set    -g "$RG" -n "$APP" --server "${ACR_NAME}.azurecr.io" --identity system

      # Key Vault-referens eller GitHub fallback för INFLUX_TOKEN
      - name: Ensure KV secret reference (influxdb-admin-token)
        if: ${{ vars.SECRET_SOURCE == 'kv' }}
        env:
          KV_INFLUX_TOKEN_URL: https://iiotpockv.vault.azure.net/secrets/influxdb-admin-token
        run: |
          set -euo pipefail
          az containerapp secret set -g "$RG" -n "$APP" \
            --secrets influxdb-admin-token=keyvaultref:${KV_INFLUX_TOKEN_URL},identityref:system

      - name: Set app secrets from GitHub (fallback)
        if: ${{ vars.SECRET_SOURCE != 'kv' }}
        run: |
          CLEAN_TOKEN="$(printf '%s' '${{ secrets.INFLUXDB_ADMIN_TOKEN }}' | tr -d '\r\n')"
          [ -z "$CLEAN_TOKEN" ] && { echo "Missing INFLUXDB_ADMIN_TOKEN"; exit 1; }
          az containerapp secret set -g "$RG" -n "$APP" \
            --secrets influxdb-admin-token="$CLEAN_TOKEN"

      # Viktigt: lägg in telegraf.conf som secret (läser från /telegraf/telegraf.conf i repo)
      - name: Ensure telegraf-conf secret
        run: |
          test -f telegraf/telegraf.conf || { echo "Missing telegraf/telegraf.conf"; exit 1; }
          az containerapp secret set -g "$RG" -n "$APP" \
            --secrets "telegraf-conf=$(<telegraf/telegraf.conf)"

      - name: Render YAML (image tag + registry)
        run: |
          cp infra/telegraf.yaml infra/telegraf.rendered.yaml
          sed -i "s|__TAG__|${{ github.sha }}|g" infra/telegraf.rendered.yaml
          sed -i "s|__ACR__|${{ env.ACR_NAME }}.azurecr.io|g" infra/telegraf.rendered.yaml
          echo "Rendered image line(s):"
          grep -n 'image:' infra/telegraf.rendered.yaml || true

      - name: Build & Deploy Telegraf (ACA)
        uses: azure/container-apps-deploy-action@v2
        with:
          resourceGroup: ${{ env.RG }}
          containerAppName: ${{ env.APP }}
          containerAppEnvironment: ${{ env.ENV_NAME }}
          acrName: ${{ env.ACR_NAME }}
          appSourcePath: ${{ github.workspace }}/telegraf
          dockerfilePath: Dockerfile
          imageToBuild: ${{ env.ACR_NAME }}.azurecr.io/iiot-telegraf:${{ github.sha }}
          yamlConfigPath: infra/telegraf.rendered.yaml

      # ❌ Ta bort detta steg – du hade tidigare skrivit en text "secretref:..." som env-värde
      # - name: Map INFLUX_TOKEN to secretref after deploy
      #   run: |
      #     az containerapp update -g "$RG" -n "$APP" \
      #       --set-env-vars INFLUX_TOKEN=secretref:influxdb-admin-token

      - name: Cleanup old inactive revisions
        run: |
          az containerapp revision list -g "$RG" -n "$APP" \
            --query "[?properties.active==\`false\`].name" -o tsv | \
          xargs -r -I {} az containerapp revision delete -g "$RG" -n "$APP" --revision {} --yes
